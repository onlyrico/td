// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"fmt"
	"time"

	"github.com/google/uuid"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

type AcquireTelegramAccountOK struct {
	AccountID TelegramAccountID `json:"account_id"`
	// Access token.
	Token uuid.UUID `json:"token"`
}

// GetAccountID returns the value of AccountID.
func (s *AcquireTelegramAccountOK) GetAccountID() TelegramAccountID {
	return s.AccountID
}

// GetToken returns the value of Token.
func (s *AcquireTelegramAccountOK) GetToken() uuid.UUID {
	return s.Token
}

// SetAccountID sets the value of AccountID.
func (s *AcquireTelegramAccountOK) SetAccountID(val TelegramAccountID) {
	s.AccountID = val
}

// SetToken sets the value of Token.
func (s *AcquireTelegramAccountOK) SetToken(val uuid.UUID) {
	s.Token = val
}

type AcquireTelegramAccountReq struct {
	// Repository owner.
	RepoOwner string `json:"repo_owner"`
	// Repository name.
	RepoName string `json:"repo_name"`
	// Job ID.
	Job        string `json:"job"`
	RunID      int64  `json:"run_id"`
	RunAttempt int    `json:"run_attempt"`
}

// GetRepoOwner returns the value of RepoOwner.
func (s *AcquireTelegramAccountReq) GetRepoOwner() string {
	return s.RepoOwner
}

// GetRepoName returns the value of RepoName.
func (s *AcquireTelegramAccountReq) GetRepoName() string {
	return s.RepoName
}

// GetJob returns the value of Job.
func (s *AcquireTelegramAccountReq) GetJob() string {
	return s.Job
}

// GetRunID returns the value of RunID.
func (s *AcquireTelegramAccountReq) GetRunID() int64 {
	return s.RunID
}

// GetRunAttempt returns the value of RunAttempt.
func (s *AcquireTelegramAccountReq) GetRunAttempt() int {
	return s.RunAttempt
}

// SetRepoOwner sets the value of RepoOwner.
func (s *AcquireTelegramAccountReq) SetRepoOwner(val string) {
	s.RepoOwner = val
}

// SetRepoName sets the value of RepoName.
func (s *AcquireTelegramAccountReq) SetRepoName(val string) {
	s.RepoName = val
}

// SetJob sets the value of Job.
func (s *AcquireTelegramAccountReq) SetJob(val string) {
	s.Job = val
}

// SetRunID sets the value of RunID.
func (s *AcquireTelegramAccountReq) SetRunID(val int64) {
	s.RunID = val
}

// SetRunAttempt sets the value of RunAttempt.
func (s *AcquireTelegramAccountReq) SetRunAttempt(val int) {
	s.RunAttempt = val
}

// Error occurred while processing request.
// Ref: #/components/schemas/Error
type Error struct {
	// Human-readable error message.
	ErrorMessage string     `json:"error_message"`
	TraceID      OptTraceID `json:"trace_id"`
	SpanID       OptSpanID  `json:"span_id"`
}

// GetErrorMessage returns the value of ErrorMessage.
func (s *Error) GetErrorMessage() string {
	return s.ErrorMessage
}

// GetTraceID returns the value of TraceID.
func (s *Error) GetTraceID() OptTraceID {
	return s.TraceID
}

// GetSpanID returns the value of SpanID.
func (s *Error) GetSpanID() OptSpanID {
	return s.SpanID
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *Error) SetErrorMessage(val string) {
	s.ErrorMessage = val
}

// SetTraceID sets the value of TraceID.
func (s *Error) SetTraceID(val OptTraceID) {
	s.TraceID = val
}

// SetSpanID sets the value of SpanID.
func (s *Error) SetSpanID(val OptSpanID) {
	s.SpanID = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Ref: #/components/schemas/Health
type Health struct {
	// Health status.
	Status string `json:"status"`
	// Service version.
	Version string `json:"version"`
	// Service commit.
	Commit string `json:"commit"`
	// Service build date.
	BuildDate time.Time `json:"build_date"`
}

// GetStatus returns the value of Status.
func (s *Health) GetStatus() string {
	return s.Status
}

// GetVersion returns the value of Version.
func (s *Health) GetVersion() string {
	return s.Version
}

// GetCommit returns the value of Commit.
func (s *Health) GetCommit() string {
	return s.Commit
}

// GetBuildDate returns the value of BuildDate.
func (s *Health) GetBuildDate() time.Time {
	return s.BuildDate
}

// SetStatus sets the value of Status.
func (s *Health) SetStatus(val string) {
	s.Status = val
}

// SetVersion sets the value of Version.
func (s *Health) SetVersion(val string) {
	s.Version = val
}

// SetCommit sets the value of Commit.
func (s *Health) SetCommit(val string) {
	s.Commit = val
}

// SetBuildDate sets the value of BuildDate.
func (s *Health) SetBuildDate(val time.Time) {
	s.BuildDate = val
}

// HeartbeatTelegramAccountOK is response for HeartbeatTelegramAccount operation.
type HeartbeatTelegramAccountOK struct{}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSpanID returns new OptSpanID with value set to v.
func NewOptSpanID(v SpanID) OptSpanID {
	return OptSpanID{
		Value: v,
		Set:   true,
	}
}

// OptSpanID is optional SpanID.
type OptSpanID struct {
	Value SpanID
	Set   bool
}

// IsSet returns true if OptSpanID was set.
func (o OptSpanID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSpanID) Reset() {
	var v SpanID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSpanID) SetTo(v SpanID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSpanID) Get() (v SpanID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSpanID) Or(d SpanID) SpanID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTraceID returns new OptTraceID with value set to v.
func NewOptTraceID(v TraceID) OptTraceID {
	return OptTraceID{
		Value: v,
		Set:   true,
	}
}

// OptTraceID is optional TraceID.
type OptTraceID struct {
	Value TraceID
	Set   bool
}

// IsSet returns true if OptTraceID was set.
func (o OptTraceID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTraceID) Reset() {
	var v TraceID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTraceID) SetTo(v TraceID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTraceID) Get() (v TraceID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTraceID) Or(d TraceID) TraceID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type ReceiveTelegramCodeOK struct {
	// Code.
	Code OptString `json:"code"`
}

// GetCode returns the value of Code.
func (s *ReceiveTelegramCodeOK) GetCode() OptString {
	return s.Code
}

// SetCode sets the value of Code.
func (s *ReceiveTelegramCodeOK) SetCode(val OptString) {
	s.Code = val
}

type SpanID string

type TelegramAccountID string

type TokenAuth struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *TokenAuth) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *TokenAuth) SetAPIKey(val string) {
	s.APIKey = val
}

type TraceID string
