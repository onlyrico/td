// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// PhoneCreateConferenceCallRequest represents TL type `phone.createConferenceCall#dfc909ab`.
//
// See https://core.telegram.org/method/phone.createConferenceCall for reference.
type PhoneCreateConferenceCallRequest struct {
	// Peer field of PhoneCreateConferenceCallRequest.
	Peer InputPhoneCall
	// KeyFingerprint field of PhoneCreateConferenceCallRequest.
	KeyFingerprint int64
}

// PhoneCreateConferenceCallRequestTypeID is TL type id of PhoneCreateConferenceCallRequest.
const PhoneCreateConferenceCallRequestTypeID = 0xdfc909ab

// Ensuring interfaces in compile-time for PhoneCreateConferenceCallRequest.
var (
	_ bin.Encoder     = &PhoneCreateConferenceCallRequest{}
	_ bin.Decoder     = &PhoneCreateConferenceCallRequest{}
	_ bin.BareEncoder = &PhoneCreateConferenceCallRequest{}
	_ bin.BareDecoder = &PhoneCreateConferenceCallRequest{}
)

func (c *PhoneCreateConferenceCallRequest) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.Peer.Zero()) {
		return false
	}
	if !(c.KeyFingerprint == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *PhoneCreateConferenceCallRequest) String() string {
	if c == nil {
		return "PhoneCreateConferenceCallRequest(nil)"
	}
	type Alias PhoneCreateConferenceCallRequest
	return fmt.Sprintf("PhoneCreateConferenceCallRequest%+v", Alias(*c))
}

// FillFrom fills PhoneCreateConferenceCallRequest from given interface.
func (c *PhoneCreateConferenceCallRequest) FillFrom(from interface {
	GetPeer() (value InputPhoneCall)
	GetKeyFingerprint() (value int64)
}) {
	c.Peer = from.GetPeer()
	c.KeyFingerprint = from.GetKeyFingerprint()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*PhoneCreateConferenceCallRequest) TypeID() uint32 {
	return PhoneCreateConferenceCallRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*PhoneCreateConferenceCallRequest) TypeName() string {
	return "phone.createConferenceCall"
}

// TypeInfo returns info about TL type.
func (c *PhoneCreateConferenceCallRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "phone.createConferenceCall",
		ID:   PhoneCreateConferenceCallRequestTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Peer",
			SchemaName: "peer",
		},
		{
			Name:       "KeyFingerprint",
			SchemaName: "key_fingerprint",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (c *PhoneCreateConferenceCallRequest) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode phone.createConferenceCall#dfc909ab as nil")
	}
	b.PutID(PhoneCreateConferenceCallRequestTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *PhoneCreateConferenceCallRequest) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode phone.createConferenceCall#dfc909ab as nil")
	}
	if err := c.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode phone.createConferenceCall#dfc909ab: field peer: %w", err)
	}
	b.PutLong(c.KeyFingerprint)
	return nil
}

// Decode implements bin.Decoder.
func (c *PhoneCreateConferenceCallRequest) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode phone.createConferenceCall#dfc909ab to nil")
	}
	if err := b.ConsumeID(PhoneCreateConferenceCallRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode phone.createConferenceCall#dfc909ab: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *PhoneCreateConferenceCallRequest) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode phone.createConferenceCall#dfc909ab to nil")
	}
	{
		if err := c.Peer.Decode(b); err != nil {
			return fmt.Errorf("unable to decode phone.createConferenceCall#dfc909ab: field peer: %w", err)
		}
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode phone.createConferenceCall#dfc909ab: field key_fingerprint: %w", err)
		}
		c.KeyFingerprint = value
	}
	return nil
}

// GetPeer returns value of Peer field.
func (c *PhoneCreateConferenceCallRequest) GetPeer() (value InputPhoneCall) {
	if c == nil {
		return
	}
	return c.Peer
}

// GetKeyFingerprint returns value of KeyFingerprint field.
func (c *PhoneCreateConferenceCallRequest) GetKeyFingerprint() (value int64) {
	if c == nil {
		return
	}
	return c.KeyFingerprint
}

// PhoneCreateConferenceCall invokes method phone.createConferenceCall#dfc909ab returning error if any.
//
// See https://core.telegram.org/method/phone.createConferenceCall for reference.
func (c *Client) PhoneCreateConferenceCall(ctx context.Context, request *PhoneCreateConferenceCallRequest) (*PhonePhoneCall, error) {
	var result PhonePhoneCall

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
